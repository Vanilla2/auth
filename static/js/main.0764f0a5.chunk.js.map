{"version":3,"sources":["firebase/firebase.js","components/home.js","components/login.js","components/signup.js","components/decider.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["app","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","props","logged","email","onClick","auth","signOut","useState","setEmail","password","setPassword","handleLogIn","a","signInWithEmailAndPassword","history","push","alert","message","placeholder","name","onChange","e","target","value","to","handleSignUp","createUserWithEmailAndPassword","ProtectedRoute","isAllowed","console","log","setLogged","onAuthStateChanged","usr","exact","path","render","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0764f0a5.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst app = firebase.initializeApp({\n    apiKey: \"AIzaSyDxsr6WiqYICYQl5fRVu_-ssJeTOpszb4Q\",\n    authDomain: \"fir-test-65cb7.firebaseapp.com\",\n    databaseURL: \"https://fir-test-65cb7.firebaseio.com\",\n    projectId: \"fir-test-65cb7\",\n    storageBucket: \"fir-test-65cb7.appspot.com\",\n    messagingSenderId: \"570794352790\",\n    appId: \"1:570794352790:web:51262a5f5b3f3ddca822b7\",\n    measurementId: \"G-VFCQQTC5HS\"\n})\n\nexport default app;","import React from 'react';\nimport firebase from \"../firebase/firebase\";\n\nexport default (props) => {\n    return(\n        <>\n            <h1>lol, home</h1>\n            <h4> If you see this, that means you are logged: {props.logged.email}</h4>\n            <button onClick={() => firebase.auth().signOut()}>Sign Out</button>\n        </>\n    )\n}","import React, {useState} from \"react\";\nimport firebase from \"../firebase/firebase\";\nimport {Link} from \"react-router-dom\";\n\nexport default (props) => {\n    const [email,setEmail] = useState(\"\");\n    const [password,setPassword] = useState(\"\");\n    const handleLogIn = async () => {\n        try {\n            await firebase.auth().signInWithEmailAndPassword(email, password);\n            props.history.push('/');\n        }\n        catch(e){\n            alert(e.message);\n        }\n    }\n    return(\n        <>\n            <h2>Log In</h2>\n            <h2>{props.logged ? \"You are logged in\" : \"You are not logged in\"}</h2>\n            <input placeholder=\"email\" name = \"email\" onChange={(e) => setEmail(e.target.value)}/>\n            <input placeholder=\"password\" name = \"password\" onChange={(e) => setPassword(e.target.value)}/>\n            <button onClick={handleLogIn}>Log In</button>\n            <Link to = \"/signup\">Sign up</Link>\n        </>\n    )\n}","import React, {useState} from \"react\";\nimport firebase from \"../firebase/firebase\";\nimport {Link} from \"react-router-dom\";\n\nexport default (props) => {\n    const [email,setEmail] = useState(\"\");\n    const [password,setPassword] = useState(\"\");\n    const handleSignUp = async () => {\n        try {\n            await firebase.auth().createUserWithEmailAndPassword(email, password);\n            props.history.push('/');\n        }\n        catch(e){\n            alert(e.message);\n        }\n    }\n    return(\n        <>\n            <h2>Sign Up</h2>\n            <h2>{props.logged ? \"You are logged in\" : \"You are not logged in\"}</h2>\n            <input placeholder=\"email\" name = \"email\" onChange={(e) => setEmail(e.target.value)}/>\n            <input placeholder=\"password\" name = \"password\" onChange={(e) => setPassword(e.target.value)}/>\n            <button onClick={handleSignUp}>Sign Up</button>\n            <Link to =\"/login\">Log In</Link>\n        </>\n    )\n}","import React from \"react\";\nimport {Redirect} from \"react-router-dom\"\n\nexport default (props) => {\n    if (props.logged){\n        return <Redirect to = \"/home\"/>\n    }\n    else{\n        return <Redirect to = \"/login\"/>\n    }\n}","import React, {useState} from 'react';\nimport firebase from \"../firebase/firebase\";\nimport Home from \"./home\";\nimport Login from \"./login\";\nimport Signup from \"./signup\"\nimport Decider from \"./decider\"\nimport {HashRouter as Router, Route, Redirect, Switch} from \"react-router-dom\";\n\nconst ProtectedRoute = ({ isAllowed, ...props }) => {\n    console.log(isAllowed);\n    return isAllowed ? <Route {...props}/> : <Redirect to=\"/login\"/>\n}\n\nexport default () => {\n    const [logged, setLogged] = useState(\"undecided\");\n    firebase.auth().onAuthStateChanged(usr =>{\n        setLogged(usr);\n    })\n    if (logged === \"undecided\"){\n        return <h2>Wait, checking logged status.</h2>\n    }\n    return(\n        <Router>\n            <Switch>\n                <Route exact path = \"/\" render = {(props) => <Decider {...props} logged = {logged}/>}/>\n                <ProtectedRoute isAllowed={logged} exact path = \"/home\" render = {(props) => <Home {...props} logged = {logged}/>}/>\n                <Route exact path = \"/login\" render = {(props) => <Login {...props} logged = {logged}/>}/>\n                <Route exact path = \"/signup\" render = {(props) => <Signup {...props} logged = {logged}/>}/>\n            </Switch>\n        </Router>\n    )\n}","import React from 'react';\nimport Index from \"./components\"\n\nfunction App() {\n  return (\n    <Index/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}